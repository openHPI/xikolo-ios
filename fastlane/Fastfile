fastlane_version "2.147.0"

default_platform :ios

flavors = [:openHPI, :openSAP, :openWHO, :moocHOUSE, :lernencloud]
fastlane_dir = File.expand_path(File.dirname(__FILE__))

platform :ios do
  private_lane :copyright do |options|
    copyright = Time.now.year.to_s

    copyright_name_path = "#{fastlane_dir}/metadata/#{options[:flavor]}/copyright_name.txt"
    if File.exist?(copyright_name_path)
      copyright += ' '
      copyright += File.read("#{fastlane_dir}/metadata/#{options[:flavor]}/copyright_name.txt").to_s.strip
    end

    copyright
  end

  desc "Increments the version number for a new patch version"
  lane :increment_version_patch do
    new_version_number = increment_version_number(
      bump_type: "patch",
    )
    commit_version_bump(
      message: "New version #{new_version_number}",
      xcodeproj: "./xikolo-ios.xcodeproj",
    )
  end

  desc "Increments the version number for a new minor version"
  lane :increment_version_minor do
    new_version_number = increment_version_number(
      bump_type: "minor",
    )
    commit_version_bump(
      message: "New version #{new_version_number}",
      xcodeproj: "./xikolo-ios.xcodeproj",
    )
  end

  desc "Increments the version number for a new major version"
  lane :increment_version_major do
    new_version_number = increment_version_number(
      bump_type: "major",
    )
    commit_version_bump(
      message: "New version #{new_version_number}",
      xcodeproj: "./xikolo-ios.xcodeproj",
    )
  end

  desc "Determines the commit for a given build number"
  desc "- pass build number via 'build_number:xxx'"
  lane :determine_commit do |options|
    if options[:build_number]
      build_components = options[:build_number].split(".")
      if build_components.length == 1
        commit_count = build_components[0].to_i
        branch_name = "main"
      elsif build_components.length == 2
        commit_count_main = build_components[0].to_i
        commit_count_dev_diff = build_components[1].to_i
        commit_count = commit_count_main + commit_count_dev_diff
        branch_name = "dev"
      elsif build_components.length == 3
        UI.user_error! "Detected feature branch build. Only builds from `main` or `dev` are supported."
      else
        UI.user_error! "Supplied malformed build number"
      end

      puts "Branch: #{branch_name}"
      puts "Commit count: #{commit_count}"

      error_callback = proc do |error|
        UI.user_error! "Branch `#{branch_name}` does not exist."
      end
      sh("git rev-parse --verify #{branch_name}", error_callback: error_callback)

      total_commit_count = sh("git rev-list #{branch_name} | wc -l | sed 's/^ *//;s/ *$//'").to_i
      puts "Total commit count on #{branch_name}: #{total_commit_count}"

      commit_count_diff = total_commit_count - commit_count
      puts "Commit count difference: #{commit_count_diff}"

      if commit_count_diff < 0
        UI.user_error! "The supplied build number refers to a commit which is to far ahead. Have you pulled the latest changes for the branch `#{branch_name}`?"
      end

      commit_id = sh("git rev-parse --short #{branch_name}~#{commit_count_diff}").strip!
      commit_title = sh("git log #{commit_id} --pretty=format:'%s' --max-count=1")
      commit_author = sh("git log #{commit_id} --pretty=format:'%an' --max-count=1")
      commit_date = sh("git log #{commit_id} --pretty=format:'%ai' --max-count=1")

      UI.header "Found commit for build_number #{options[:build_number]}"
      UI.success "Branch: #{branch_name}"
      UI.success "Commit id: #{commit_id}"
      UI.success "Commit title: #{commit_title}"
      UI.success "Commit author: #{commit_author}"
      UI.success "Commit date: #{commit_date}"
    else
      UI.user_error! "No build number supplied (use `fastlane determine_commit build_number:xxx`)"
    end
  end

  desc "Lint swift code with swiftlint"
  lane :lint do |options|
    run_swiftlint(mode: :lint)
  end

  desc "Format swift code with swiftlint"
  lane :format do |options|
    run_swiftlint(mode: :fix)
  end

  private_lane :run_swiftlint do |options|
    swiftlint(
      mode: options[:mode],
      executable: "Pods/SwiftLint/swiftlint",
      config_file: ".swiftlint.yml",
      quiet: true,
      ignore_exit_status: true,
    )
  end

  desc "Adds localizations for the application incrementally"
  desc "- uses bartycrouch"
  desc "- translates storyboard files and NSLocalizedString usages"
  lane :localize do
    File.delete("../iOS/R.generated.swift") if File.exist? "../iOS/R.generated.swift"
    sh "../Pods/BartyCrouch/bartycrouch interfaces -p ../iOS/"
    sh "../Pods/BartyCrouch/bartycrouch interfaces -p ../TodayExtension/"
    sh "../Pods/BartyCrouch/bartycrouch code -p ../Common/ -l ../Common/ -s -c -e -f 'CommonLocalizedString'"
    sh "../Pods/BartyCrouch/bartycrouch code -p ../Binge/ -l ../Binge/ -s -c -e -f 'BingeLocalizedString'"
    sh "../Pods/BartyCrouch/bartycrouch code -p ../iOS/ -l ../iOS/ -s -c -e"
  end

  desc "Create screenshots for all applications"
  lane :make_screenshots do
    flavors.each { |flavor| public_send :"make_screenshots_#{flavor.downcase}" }
  end

  flavors.each do |flavor|
    lane :"make_screenshots_#{flavor.downcase}" do
      if flavor == :openSAP
        snapshot(
          scheme: "#{flavor}-iOS-UITests",
          output_directory: "#{fastlane_dir}/screenshots/#{flavor}",
          derived_data_path: "#{fastlane_dir}/screenshots/DerivedData/#{flavor}",
          languages: ["en-US"],
        )
      else
        snapshot(
          scheme: "#{flavor}-iOS-UITests",
          output_directory: "#{fastlane_dir}/screenshots/#{flavor}",
          derived_data_path: "#{fastlane_dir}/screenshots/DerivedData/#{flavor}",
        )
      end
    end
  end

  desc "Upload only screenshots to iTunesConnect"
  desc "No upload of screenshots or IPA"
  lane :upload_screenshots do
    flavors.each { |flavor| public_send :"upload_screenshots_#{flavor.downcase}" }
  end

  flavors.each do |flavor|
    lane :"upload_screenshots_#{flavor.downcase}" do
      deliver(
        app_identifier: "de.xikolo.#{flavor.downcase}",
        app_version: get_version_number(target: "iOS"),
        metadata_path: "#{fastlane_dir}/metadata/#{flavor}",
        screenshots_path: "#{fastlane_dir}/screenshots/#{flavor}",
        overwrite_screenshots: true,
        skip_binary_upload: true,
        skip_metadata: true,
        precheck_include_in_app_purchases: false,
      )
    end
  end

  desc "Upload only metadata to iTunesConnect"
  desc "No upload of screenshots or IPA"
  lane :upload_metadata do
    flavors.each { |flavor| public_send :"upload_metadata_#{flavor.downcase}" }
  end

  flavors.each do |flavor|
    lane :"upload_metadata_#{flavor.downcase}" do
      deliver(
        app_identifier: "de.xikolo.#{flavor.downcase}",
        app_version: get_version_number(target: "iOS"),
        metadata_path: "#{fastlane_dir}/metadata/#{flavor}",
        copyright: copyright(flavor: flavor),
        skip_binary_upload: true,
        skip_screenshots: true,
        precheck_include_in_app_purchases: false,
        force: true,
      )
    end
  end

  desc "Build and upload only IPA and metadata to iTunesConnect"
  desc "No upload of screenshots"
  lane :release do
    ensure_git_branch(branch: 'main')
    flavors.each { |flavor| public_send :"release_#{flavor.downcase}" }
  end

  flavors.each do |flavor|
    lane :"release_#{flavor.downcase}" do
      ensure_git_status_clean
      ensure_git_branch(branch: 'main')
      upload_ipa(flavor: flavor, automatic_release: true)
    end
  end

  desc "Build and upload only IPA (beta) to iTunesConnect"
  desc "No upload of screenshots or metadata"
  lane :beta do
    ensure_git_branch(branch: 'dev')
    flavors.each { |flavor| public_send :"beta_#{flavor.downcase}" }
  end

  flavors.each do |flavor|
    lane :"beta_#{flavor.downcase}" do
      ensure_git_status_clean
      ensure_git_branch(branch: 'dev')
      upload_ipa(flavor: flavor, skip_metadata: true)
    end
  end

  private_lane :upload_ipa do |options|
    if options[:flavor]
      flavor = options[:flavor]
      skip_metadata = (options[:skip_metadata] ? true : false)
      automatic_release = (options[:automatic_release] ? true : false)
      gym(
        scheme: "#{flavor}-iOS",
        include_bitcode: false,
        include_symbols: true,
        export_method: "app-store",
        export_options: {
          compileBitcode: false,
          provisioningProfiles: {
            "de.xikolo.#{flavor.downcase}" => "#{flavor}-iOS-dist",
            "de.xikolo.#{flavor.downcase}.today" => "#{flavor}-today-dist",
            "de.xikolo.#{flavor.downcase}.widget" => "#{flavor}-widget-dist",
          }
        },
      )
      deliver(
        app_identifier: "de.xikolo.#{flavor.downcase}",
        app_version: get_version_number(target: "iOS"),
        force: true,
        metadata_path: "#{fastlane_dir}/metadata/#{flavor}",
        copyright: copyright(flavor: flavor),
        skip_screenshots: true,
        skip_metadata: skip_metadata,
        precheck_include_in_app_purchases: false,
        automatic_release: automatic_release,
        submission_information: {
          add_id_info_uses_idfa: false,
        }
      )
    else
      UI.user_error! "No flavor supplied for IPA upload"
    end
  end

  lane :tag_release do
    version_number = get_version_number(target: "iOS")
    last_commit_id = sh("git rev-parse HEAD")
    last_commit_id.strip!
    release_notes = File.read("#{fastlane_dir}/metadata/default/en-US/release_notes.txt") rescue "No changelog provided"
    set_github_release(
      repository_name: "openHPI/xikolo-ios",
      name: "iOS v#{version_number}",
      tag_name: "ios-v#{version_number}",
      description: release_notes,
      commitish: last_commit_id,
    )
  end

  desc "Download dSYMS files from iTunesConnect and upload them to Firebase"
  lane :refresh_dsyms do
    flavors.each do |flavor|
      public_send :"refresh_dsyms_#{flavor.downcase}"
      lane_context[SharedValues::DSYM_PATHS] = nil
    end
  end

  flavors.each do |flavor|
    lane :"refresh_dsyms_#{flavor.downcase}" do
      download_dsyms(
        app_identifier: "de.xikolo.#{flavor.downcase}",
        version: get_version_number(target: "iOS"),
      )
      upload_symbols_to_crashlytics(
        gsp_path: "iOS/Branding/#{flavor}/GoogleService-Info-Release.plist",
        binary_path: "#{fastlane_dir}/scripts/upload_symbols",
      )
      clean_build_artifacts
    end
  end

  lane :changelog do
    git_pull(only_tags: true)
    changelog_from_git_commits(pretty: '%h %s')
  end

  desc "Check if the core data model was modified since the last release"
  lane :check_core_data do
    git_pull(only_tags: true)
    latest_tag = sh("git describe --tags `git rev-list --tags --max-count=1`").strip!
    number_of_changed_core_data_files = sh("git diff #{latest_tag}..head --name-only | grep '.xcdatamodeld' | wc -l").strip!
    UI.header "Status of Core Data model"
    if number_of_changed_core_data_files == "0"
      UI.important "The core data model was not modified since the last release."
      UI.important "You should create a new model version!"
    else
      UI.success "The core data model was already modified since the last release."
      UI.success "Feel you to make further changes."
    end
  end

  desc "Export localizations and strip unwanted strings"
  lane :export_localizations do

    require 'nokogiri'

    project = '../xikolo-ios.xcodeproj'
    localization_path = 'localization-export'
    xliff_location = "#{localization_path}/en.xcloc/Localized Contents/en.xliff"

    sh("xcodebuild -exportLocalizations -project #{project} -localizationPath #{localization_path}")

    # remove unwanted translation units
    file = File.read(xliff_location)
    xml = Nokogiri::XML(file)

    exclude_indicators = [
      '#bc-ignore!',
      'No comment provided by engineer',
      'Bundle name',
    ]

    xml.search("trans-unit").each do |node|
      note = node.search("note").inner_text
      should_exclude = exclude_indicators.any? { |indicator| note.include?(indicator) }
      node.remove if should_exclude
    end

    File.open(xliff_location, "w") do |f|
      f.write xml.to_xml
    end

    # remove files without translation units
    file = File.read(xliff_location)
    xml = Nokogiri::XML(file)

    xml.search("file").each do |node|
      node.remove if node.search("body").children.length < 2
    end

    File.open(xliff_location, "w") do |f|
      f.write xml.to_xml
    end
  end
end
